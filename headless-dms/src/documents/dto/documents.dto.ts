import { z } from 'zod';

// Schema for creating a new document (input from client)
export const CreateDocumentSchema = z.object({
  name: z.string().min(1, 'Document name cannot be empty'),
  filePath: z.string().url('File path must be a valid URL'), // Adjust if not always a URL
  mimeType: z.string().min(1, 'MIME type cannot be empty'),
  size: z.string().min(1, 'Size cannot be empty'), // Could be z.number() if you store bytes
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.string(), z.string()).optional(),
  // id, createdAt, updatedAt are generated by the app/DB
});

export type CreateDocumentDto = z.infer<typeof CreateDocumentSchema>;

// Schema for fetching an existing document (output to client)
export const DocumentSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  size: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  tags: z.array(z.string()),
  metadata: z.record(z.string(), z.string()),
});

export type DocumentDto = z.infer<typeof DocumentSchema>;

// Optional: Schema for updating a document (partial update)
export const UpdateDocumentSchema = CreateDocumentSchema.partial();
export type UpdateDocumentDto = z.infer<typeof UpdateDocumentSchema>;

// For a list of documents
export const DocumentsListSchema = z.array(DocumentSchema);
export type DocumentsListDto = z.infer<typeof DocumentsListSchema>;
