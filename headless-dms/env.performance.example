# Performance Monitoring Configuration Example
# Copy these variables to your .env file and adjust values as needed

# ========================================================
# PERFORMANCE MONITORING MAIN SETTINGS
# ========================================================

# Enable/disable performance monitoring system
PERFORMANCE_MONITORING_ENABLED=true

# Sample rate for performance monitoring (0.0 to 1.0)
# 1.0 = track all operations, 0.5 = track 50% of operations
PERFORMANCE_MONITORING_SAMPLE_RATE=1.0

# ========================================================
# STORAGE OPERATION MONITORING
# ========================================================

# Enable/disable storage operation monitoring
PERFORMANCE_MONITORING_STORAGE=true

# Slow storage operation threshold in milliseconds
# Operations taking longer than this will be flagged as slow
PERFORMANCE_MONITORING_SLOW_STORAGE_THRESHOLD=5000

# ========================================================
# API RESPONSE MONITORING
# ========================================================

# Enable/disable API response monitoring
PERFORMANCE_MONITORING_API=true

# Slow API response threshold in milliseconds
# Responses taking longer than this will be flagged as slow
PERFORMANCE_MONITORING_SLOW_API_THRESHOLD=2000

# ========================================================
# DATABASE QUERY MONITORING
# ========================================================

# Enable/disable database query monitoring
PERFORMANCE_MONITORING_DATABASE=true

# Slow database query threshold in milliseconds
# Queries taking longer than this will be flagged as slow
PERFORMANCE_MONITORING_SLOW_QUERY_THRESHOLD=1000

# ========================================================
# FILE OPERATION MONITORING
# ========================================================

# Enable/disable file operation monitoring
PERFORMANCE_MONITORING_FILES=true

# ========================================================
# PERFORMANCE MIDDLEWARE SETTINGS
# ========================================================

# Enable/disable performance monitoring middleware
PERFORMANCE_MIDDLEWARE_ENABLED=true

# Track request size in bytes
PERFORMANCE_MIDDLEWARE_TRACK_REQUEST_SIZE=true

# Track response size in bytes
PERFORMANCE_MIDDLEWARE_TRACK_RESPONSE_SIZE=true

# Track user context (user ID, role) from requests
PERFORMANCE_MIDDLEWARE_TRACK_USER_CONTEXT=true

# ========================================================
# PERFORMANCE ALERTING
# ========================================================

# Enable/disable performance alerting
PERFORMANCE_ALERTING_ENABLED=true

# Percentile threshold for slow operation alerts (50-99)
# Operations slower than this percentile will trigger alerts
PERFORMANCE_ALERTING_SLOW_OPERATION_PERCENTILE=95

# ========================================================
# METRICS AGGREGATION
# ========================================================

# Enable/disable metrics aggregation
PERFORMANCE_METRICS_AGGREGATION_ENABLED=true

# Metrics aggregation interval in milliseconds
# How often to aggregate and send metrics to New Relic
PERFORMANCE_METRICS_AGGREGATION_INTERVAL=60000

# ========================================================
# PERFORMANCE DASHBOARD
# ========================================================

# Enable/disable performance dashboard
PERFORMANCE_DASHBOARD_ENABLED=true

# Performance dashboard port
PERFORMANCE_DASHBOARD_PORT=3001

# ========================================================
# INTEGRATION WITH EXISTING SYSTEMS
# ========================================================

# These settings integrate with the existing metrics system
# Ensure they are also configured in your .env file

# New Relic configuration (required for performance monitoring)
NEW_RELIC_ENABLED=true
NEW_RELIC_LICENSE_KEY=your_license_key_here
NEW_RELIC_APP_NAME=your_app_name_here

# Metrics system configuration
METRICS_ENABLED=true
METRICS_NEW_RELIC_ENABLED=true

# ========================================================
# PERFORMANCE MONITORING FEATURES
# ========================================================

# The performance monitoring system provides:

# 1. Storage Operation Timing
#    - Upload/download performance tracking
#    - Storage strategy performance comparison
#    - Slow operation detection and alerting

# 2. API Response Times
#    - Request/response timing
#    - Request/response size tracking
#    - User context correlation

# 3. Database Query Performance
#    - Query execution time tracking
#    - Slow query detection
#    - Row count and operation type metrics

# 4. File Upload/Download Metrics
#    - File size correlation with performance
#    - Processing step timing
#    - File type performance analysis

# 5. Performance Middleware
#    - Automatic HTTP request/response timing
#    - Request/response size calculation
#    - User context extraction

# 6. Configuration Management
#    - Environment-based configuration
#    - Runtime configuration updates
#    - Health status monitoring

# 7. New Relic Integration
#    - Custom performance metrics
#    - Slow operation alerts
#    - Performance dashboards

# ========================================================
# USAGE EXAMPLES
# ========================================================

# Monitor a storage operation:
# const timer = performanceMonitor.createTimer();
# const result = await storageStrategy.upload(file);
# timer.endStorageOperation({
#   operation: 'upload',
#   strategy: 's3',
#   success: true,
#   fileSize: file.size,
#   fileType: file.type
# });

# Monitor a database operation:
# const result = await databaseMonitor.monitorOperation(
#   { operation: 'select', table: 'documents' },
#   () => db.select().from(documents).execute()
# );

# Monitor a file operation:
# const result = await fileMonitor.monitorUpload(
#   'application/pdf',
#   file.size,
#   ['validation', 'compression', 'upload'],
#   () => uploadFile(file)
# );

# Use decorators for automatic monitoring:
# @MonitorDatabase({ operation: 'select', table: 'documents' })
# async getDocuments() { ... }

# @MonitorFile({ operation: 'upload', fileType: 'application/pdf' })
# async uploadDocument(file: File) { ... }
